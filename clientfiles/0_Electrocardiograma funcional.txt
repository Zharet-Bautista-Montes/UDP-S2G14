## Parámetros previos y de referencia
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks

#Valores por defecto para P, Q, R, S, T
#(primera hilera para a_i, segunda hilera para b_i, tercera hilera para theta_i)
default_conf = [[1.2, -5.0, 30.0, -7.5, 0.75],
                [0.25, 0.1, 0.1, 0.1, 0.4],
                [-(1/3)*np.pi, -(1/12)*np.pi, 0, (1/12)*np.pi, (1/2)*np.pi]]

bpm = int(input('Ingrese la frecuencia cardiaca en latidos/minuto'))
beats = int(input('Ingrese el número de latidos'))
sf = float(input('Ingrese la frecuencia de muestreo'))

#condición inicial para las funciones
#Y10 es la condición inicial para x
y10=1.0
y20=0.0
y30=0.04
h = 1/sf

#tiempo inicial
t0 = 0.0
#tiempo final (se toma como referencia el número de latidos)
tf = beats * 60 / bpm
#arreglo que va de t0 a tf con pasos de h
t = np.arange(t0, tf+h, h)
#array que guarda y(t)
Y1ref=np.zeros(np.size(t))
Y2ref=np.zeros(np.size(t))
Y3ref=np.zeros(np.size(t))

#asigna valor condición inicial al arreglo
Y1ref[0]=y10
Y2ref[0]=y20
Y3ref[0]=y30

trr = np.random.normal(60/bpm, 0.05*60/bpm, np.size(t))
print(trr)

##Funciones del modelo matemático

#define la función de xpunto
def fxpunto(y1, y2, w):
    alfa = 1 - np.sqrt(y1**2+y2**2)
    return(alfa*y1 - w*y2)

#define la función de ypunto
def fypunto(y1, y2, w):
    alfa = 1 - np.sqrt(y1**2+y2**2)
    return(alfa*y2 + w*y1)

#define la función de zpunto
def fzpunto(ai, bi, thetai, y1, y2, y3, t):
    theta=np.arctan2(y2,y1)
    z0 = 0.0015 * np.sin(2 * np.pi * t * 0.25)
    suma = 0
    for i in range(0, np.size(ai)):
        deltathetai=np.fmod(theta-thetai[i],2.0*np.pi)
        suma+=ai[i]*deltathetai*np.exp(-(deltathetai**2)/(2*(bi[i]**2)))
    return(-suma-(y3-z0))

##Euler hacia adelante
# codigo aun con errores de euler hacia adelante

def ECGadelante(ai,bi,thetai):
    for i in range(1, len(t)):
        Y1ref[i] = Y1ref[i - 1] + h * fxpunto(Y1ref[i - 1], Y2ref[i - 1], 2.0 * np.pi / trr[i - 1])
        Y2ref[i] = Y2ref[i - 1] + h * fypunto(Y1ref[i - 1], Y2ref[i - 1], 2.0 * np.pi / trr[i - 1])
        Y3ref[i] = Y3ref[i - 1] + h * fzpunto(ai, bi, thetai, Y1ref[i - 1], Y2ref[i - 1], Y3ref[i - 1], trr[i - 1])

    print("y1:\n", Y1ref)
    print("\n y2:\n", Y2ref)
    print("\n y3:\n", Y3ref)

    #graficamos la solución encontrada por el método de Euler hacia adelante
    #y de forma analítica
    plt.figure()
    plt.plot(t, Y3ref)
    plt.xlabel("t")
    plt.ylabel("Y(t)")
    plt.title("ECG Forward")
    plt.legend(["Euler forward"])
    plt.grid(1)

ECGadelante(default_conf[0],default_conf[1],default_conf[2])

##Método Runge-Kutta 2
def ECGRungeKutta2(ai,bi,thetai):
    for i in range(1, len(t)):
        k11 = fxpunto(Y1ref[i - 1], Y2ref[i - 1], 2.0 * np.pi / trr[i - 1])
        k21 = fypunto(Y1ref[i - 1], Y2ref[i - 1], 2.0 * np.pi / trr[i - 1])
        k31 = fzpunto(ai, bi, thetai, Y1ref[i - 1], Y2ref[i - 1], Y3ref[i - 1], trr[i - 1])
        k12 = fxpunto(Y1ref[i - 1] + k11 * h, Y2ref[i - 1] + k21 * h, 2.0 * np.pi / trr[i - 1] + h)
        k22 = fypunto(Y1ref[i - 1] + k11 * h, Y2ref[i - 1] + k21 * h, 2.0 * np.pi / trr[i - 1] + h)
        k32 = fzpunto(ai, bi, thetai, Y1ref[i - 1] + k11 * h, Y2ref[i - 1] + k21 * h, Y3ref[i - 1] + k31 * h,
                      trr[i - 1] + h)
        Y1ref[i] = Y1ref[i - 1] + h * (k11 + k12) / 2.0
        Y2ref[i] = Y2ref[i - 1] + h * (k21 + k22) / 2.0
        Y3ref[i] = Y3ref[i - 1] + h * (k31 + k32) / 2.0

    print("y1:\n", Y1ref)
    print("\n y2:\n", Y2ref)
    print("\n y3:\n", Y3ref)

    #graficamos la solución encontrada por el método de Runge Kutta de orden 2
    #y de forma analítica
    plt.figure()
    plt.plot(t, Y3ref)
    plt.xlabel("t")
    plt.ylabel("Y(t)")
    plt.title("ECG RungeKutta2")
    plt.legend(["Runge-Kutta 2"])
    plt.grid(1)

ECGRungeKutta2(default_conf[0],default_conf[1],default_conf[2])

##Método Runge-Kutta 4
def ECGRungeKutta4(ai,bi,thetai):
    for i in range(1, len(t)):
        k11 = fxpunto(Y1ref[i - 1], Y2ref[i - 1], 2.0 * np.pi / trr[i - 1])
        k21 = fypunto(Y1ref[i - 1], Y2ref[i - 1], 2.0 * np.pi / trr[i - 1])
        k31 = fzpunto(ai, bi, thetai, Y1ref[i - 1], Y2ref[i - 1], Y3ref[i - 1], trr[i - 1])
        k12 = fxpunto(Y1ref[i - 1] + k11 * h / 2.0, Y2ref[i - 1] + k21 * h / 2.0, 2.0 * np.pi / trr[i - 1] + h / 2.0)
        k22 = fypunto(Y1ref[i - 1] + k11 * h / 2.0, Y2ref[i - 1] + k21 * h / 2.0, 2.0 * np.pi / trr[i - 1] + h / 2.0)
        k32 = fzpunto(ai, bi, thetai, Y1ref[i - 1] + k11 * h / 2.0, Y2ref[i - 1] + k21 * h / 2.0,
                      Y3ref[i - 1] + k31 * h / 2.0, trr[i - 1] + h / 2.0)
        k13 = fxpunto(Y1ref[i - 1] + k12 * h / 2.0, Y2ref[i - 1] + k22 * h / 2.0, 2.0 * np.pi / trr[i - 1] + h / 2.0)
        k23 = fypunto(Y1ref[i - 1] + k12 * h / 2.0, Y2ref[i - 1] + k22 * h / 2.0, 2.0 * np.pi / trr[i - 1] + h / 2.0)
        k33 = fzpunto(ai, bi, thetai, Y1ref[i - 1] + k12 * h / 2.0, Y2ref[i - 1] + k22 * h / 2.0,
                      Y3ref[i - 1] + k32 * h / 2.0, trr[i - 1] + h / 2.0)
        k14 = fxpunto(Y1ref[i - 1] + k13 * h, Y2ref[i - 1] + k23 * h, 2.0 * np.pi / trr[i - 1] + h)
        k24 = fypunto(Y1ref[i - 1] + k13 * h, Y2ref[i - 1] + k23 * h, 2.0 * np.pi / trr[i - 1] + h)
        k34 = fzpunto(ai, bi, thetai, Y1ref[i - 1] + k13 * h, Y2ref[i - 1] + k23 * h, Y3ref[i - 1] + k33 * h,
                      trr[i - 1] + h)
        Y1ref[i] = Y1ref[i - 1] + h * (k11 + 2.0*k12 + 2.0*k13 + k14) / 6.0
        Y2ref[i] = Y2ref[i - 1] + h * (k21 + 2.0*k22 + 2.0*k23 + k24) / 6.0
        Y3ref[i] = Y3ref[i - 1] + h * (k31 + 2.0*k32 + 2.0*k33 + k34) / 6.0

    print("y1:\n", Y1ref)
    print("\n y2:\n", Y2ref)
    print("\n y3:\n", Y3ref)

    #graficamos la solución encontrada por el método de Runge Kutta de orden 4
    #y de forma analítica
    plt.figure()
    plt.plot(t, Y3ref)
    plt.xlabel("t")
    plt.ylabel("Y(t)")
    plt.title("ECG RungeKutta4")
    plt.legend(["Runge-Kutta 4"])
    plt.grid(1)